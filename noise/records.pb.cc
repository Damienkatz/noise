// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: records.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "records.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace records {

namespace {

const ::google::protobuf::Descriptor* header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  header_reflection_ = NULL;
const ::google::protobuf::Descriptor* wordinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  wordinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* arrayoffsets_to_wordinfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  arrayoffsets_to_wordinfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* payload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  payload_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_records_2eproto() {
  protobuf_AddDesc_records_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "records.proto");
  GOOGLE_CHECK(file != NULL);
  header_descriptor_ = file->message_type(0);
  static const int header_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header, high_seq_),
  };
  header_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      header_descriptor_,
      header::default_instance_,
      header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(header, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(header));
  wordinfo_descriptor_ = file->message_type(1);
  static const int wordinfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wordinfo, stemmedoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wordinfo, suffixoffset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wordinfo, suffixtext_),
  };
  wordinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      wordinfo_descriptor_,
      wordinfo::default_instance_,
      wordinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wordinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(wordinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(wordinfo));
  arrayoffsets_to_wordinfo_descriptor_ = file->message_type(2);
  static const int arrayoffsets_to_wordinfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arrayoffsets_to_wordinfo, arrayoffsets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arrayoffsets_to_wordinfo, wordinfos_),
  };
  arrayoffsets_to_wordinfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      arrayoffsets_to_wordinfo_descriptor_,
      arrayoffsets_to_wordinfo::default_instance_,
      arrayoffsets_to_wordinfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arrayoffsets_to_wordinfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(arrayoffsets_to_wordinfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(arrayoffsets_to_wordinfo));
  payload_descriptor_ = file->message_type(3);
  static const int payload_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(payload, arrayoffsets_to_wordinfos_),
  };
  payload_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      payload_descriptor_,
      payload::default_instance_,
      payload_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(payload, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(payload, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(payload));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_records_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    header_descriptor_, &header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    wordinfo_descriptor_, &wordinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    arrayoffsets_to_wordinfo_descriptor_, &arrayoffsets_to_wordinfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    payload_descriptor_, &payload::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_records_2eproto() {
  delete header::default_instance_;
  delete header_reflection_;
  delete wordinfo::default_instance_;
  delete wordinfo_reflection_;
  delete arrayoffsets_to_wordinfo::default_instance_;
  delete arrayoffsets_to_wordinfo_reflection_;
  delete payload::default_instance_;
  delete payload_reflection_;
}

void protobuf_AddDesc_records_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rrecords.proto\022\007records\"+\n\006header\022\017\n\007ve"
    "rsion\030\001 \002(\004\022\020\n\010high_seq\030\002 \002(\004\"K\n\010wordinf"
    "o\022\025\n\rstemmedOffset\030\001 \002(\004\022\024\n\014suffixOffset"
    "\030\002 \002(\003\022\022\n\nsuffixText\030\003 \002(\t\"V\n\030arrayoffse"
    "ts_to_wordinfo\022\024\n\014arrayoffsets\030\001 \003(\004\022$\n\t"
    "wordinfos\030\002 \003(\0132\021.records.wordinfo\"O\n\007pa"
    "yload\022D\n\031arrayoffsets_to_wordinfos\030\001 \003(\013"
    "2!.records.arrayoffsets_to_wordinfo", 315);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "records.proto", &protobuf_RegisterTypes);
  header::default_instance_ = new header();
  wordinfo::default_instance_ = new wordinfo();
  arrayoffsets_to_wordinfo::default_instance_ = new arrayoffsets_to_wordinfo();
  payload::default_instance_ = new payload();
  header::default_instance_->InitAsDefaultInstance();
  wordinfo::default_instance_->InitAsDefaultInstance();
  arrayoffsets_to_wordinfo::default_instance_->InitAsDefaultInstance();
  payload::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_records_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_records_2eproto {
  StaticDescriptorInitializer_records_2eproto() {
    protobuf_AddDesc_records_2eproto();
  }
} static_descriptor_initializer_records_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int header::kVersionFieldNumber;
const int header::kHighSeqFieldNumber;
#endif  // !_MSC_VER

header::header()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:records.header)
}

void header::InitAsDefaultInstance() {
}

header::header(const header& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:records.header)
}

void header::SharedCtor() {
  _cached_size_ = 0;
  version_ = GOOGLE_ULONGLONG(0);
  high_seq_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

header::~header() {
  // @@protoc_insertion_point(destructor:records.header)
  SharedDtor();
}

void header::SharedDtor() {
  if (this != default_instance_) {
  }
}

void header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return header_descriptor_;
}

const header& header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_records_2eproto();
  return *default_instance_;
}

header* header::default_instance_ = NULL;

header* header::New() const {
  return new header;
}

void header::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<header*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(version_, high_seq_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:records.header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_high_seq;
        break;
      }

      // required uint64 high_seq = 2;
      case 2: {
        if (tag == 16) {
         parse_high_seq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &high_seq_)));
          set_has_high_seq();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:records.header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:records.header)
  return false;
#undef DO_
}

void header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:records.header)
  // required uint64 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->version(), output);
  }

  // required uint64 high_seq = 2;
  if (has_high_seq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->high_seq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:records.header)
}

::google::protobuf::uint8* header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:records.header)
  // required uint64 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->version(), target);
  }

  // required uint64 high_seq = 2;
  if (has_high_seq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->high_seq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:records.header)
  return target;
}

int header::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

    // required uint64 high_seq = 2;
    if (has_high_seq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->high_seq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void header::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const header* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const header*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void header::MergeFrom(const header& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_high_seq()) {
      set_high_seq(from.high_seq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void header::CopyFrom(const header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool header::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void header::Swap(header* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(high_seq_, other->high_seq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = header_descriptor_;
  metadata.reflection = header_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int wordinfo::kStemmedOffsetFieldNumber;
const int wordinfo::kSuffixOffsetFieldNumber;
const int wordinfo::kSuffixTextFieldNumber;
#endif  // !_MSC_VER

wordinfo::wordinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:records.wordinfo)
}

void wordinfo::InitAsDefaultInstance() {
}

wordinfo::wordinfo(const wordinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:records.wordinfo)
}

void wordinfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  stemmedoffset_ = GOOGLE_ULONGLONG(0);
  suffixoffset_ = GOOGLE_LONGLONG(0);
  suffixtext_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

wordinfo::~wordinfo() {
  // @@protoc_insertion_point(destructor:records.wordinfo)
  SharedDtor();
}

void wordinfo::SharedDtor() {
  if (suffixtext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete suffixtext_;
  }
  if (this != default_instance_) {
  }
}

void wordinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* wordinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return wordinfo_descriptor_;
}

const wordinfo& wordinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_records_2eproto();
  return *default_instance_;
}

wordinfo* wordinfo::default_instance_ = NULL;

wordinfo* wordinfo::New() const {
  return new wordinfo;
}

void wordinfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<wordinfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(stemmedoffset_, suffixoffset_);
    if (has_suffixtext()) {
      if (suffixtext_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        suffixtext_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool wordinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:records.wordinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 stemmedOffset = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &stemmedoffset_)));
          set_has_stemmedoffset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_suffixOffset;
        break;
      }

      // required int64 suffixOffset = 2;
      case 2: {
        if (tag == 16) {
         parse_suffixOffset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &suffixoffset_)));
          set_has_suffixoffset();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_suffixText;
        break;
      }

      // required string suffixText = 3;
      case 3: {
        if (tag == 26) {
         parse_suffixText:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_suffixtext()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->suffixtext().data(), this->suffixtext().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "suffixtext");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:records.wordinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:records.wordinfo)
  return false;
#undef DO_
}

void wordinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:records.wordinfo)
  // required uint64 stemmedOffset = 1;
  if (has_stemmedoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->stemmedoffset(), output);
  }

  // required int64 suffixOffset = 2;
  if (has_suffixoffset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->suffixoffset(), output);
  }

  // required string suffixText = 3;
  if (has_suffixtext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suffixtext().data(), this->suffixtext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "suffixtext");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->suffixtext(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:records.wordinfo)
}

::google::protobuf::uint8* wordinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:records.wordinfo)
  // required uint64 stemmedOffset = 1;
  if (has_stemmedoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->stemmedoffset(), target);
  }

  // required int64 suffixOffset = 2;
  if (has_suffixoffset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->suffixoffset(), target);
  }

  // required string suffixText = 3;
  if (has_suffixtext()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->suffixtext().data(), this->suffixtext().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "suffixtext");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->suffixtext(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:records.wordinfo)
  return target;
}

int wordinfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 stemmedOffset = 1;
    if (has_stemmedoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->stemmedoffset());
    }

    // required int64 suffixOffset = 2;
    if (has_suffixoffset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->suffixoffset());
    }

    // required string suffixText = 3;
    if (has_suffixtext()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->suffixtext());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void wordinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const wordinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const wordinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void wordinfo::MergeFrom(const wordinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stemmedoffset()) {
      set_stemmedoffset(from.stemmedoffset());
    }
    if (from.has_suffixoffset()) {
      set_suffixoffset(from.suffixoffset());
    }
    if (from.has_suffixtext()) {
      set_suffixtext(from.suffixtext());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void wordinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void wordinfo::CopyFrom(const wordinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool wordinfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void wordinfo::Swap(wordinfo* other) {
  if (other != this) {
    std::swap(stemmedoffset_, other->stemmedoffset_);
    std::swap(suffixoffset_, other->suffixoffset_);
    std::swap(suffixtext_, other->suffixtext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata wordinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = wordinfo_descriptor_;
  metadata.reflection = wordinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int arrayoffsets_to_wordinfo::kArrayoffsetsFieldNumber;
const int arrayoffsets_to_wordinfo::kWordinfosFieldNumber;
#endif  // !_MSC_VER

arrayoffsets_to_wordinfo::arrayoffsets_to_wordinfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:records.arrayoffsets_to_wordinfo)
}

void arrayoffsets_to_wordinfo::InitAsDefaultInstance() {
}

arrayoffsets_to_wordinfo::arrayoffsets_to_wordinfo(const arrayoffsets_to_wordinfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:records.arrayoffsets_to_wordinfo)
}

void arrayoffsets_to_wordinfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

arrayoffsets_to_wordinfo::~arrayoffsets_to_wordinfo() {
  // @@protoc_insertion_point(destructor:records.arrayoffsets_to_wordinfo)
  SharedDtor();
}

void arrayoffsets_to_wordinfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void arrayoffsets_to_wordinfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* arrayoffsets_to_wordinfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return arrayoffsets_to_wordinfo_descriptor_;
}

const arrayoffsets_to_wordinfo& arrayoffsets_to_wordinfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_records_2eproto();
  return *default_instance_;
}

arrayoffsets_to_wordinfo* arrayoffsets_to_wordinfo::default_instance_ = NULL;

arrayoffsets_to_wordinfo* arrayoffsets_to_wordinfo::New() const {
  return new arrayoffsets_to_wordinfo;
}

void arrayoffsets_to_wordinfo::Clear() {
  arrayoffsets_.Clear();
  wordinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool arrayoffsets_to_wordinfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:records.arrayoffsets_to_wordinfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint64 arrayoffsets = 1;
      case 1: {
        if (tag == 8) {
         parse_arrayoffsets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 8, input, this->mutable_arrayoffsets())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_arrayoffsets())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_arrayoffsets;
        if (input->ExpectTag(18)) goto parse_wordinfos;
        break;
      }

      // repeated .records.wordinfo wordinfos = 2;
      case 2: {
        if (tag == 18) {
         parse_wordinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wordinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wordinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:records.arrayoffsets_to_wordinfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:records.arrayoffsets_to_wordinfo)
  return false;
#undef DO_
}

void arrayoffsets_to_wordinfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:records.arrayoffsets_to_wordinfo)
  // repeated uint64 arrayoffsets = 1;
  for (int i = 0; i < this->arrayoffsets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      1, this->arrayoffsets(i), output);
  }

  // repeated .records.wordinfo wordinfos = 2;
  for (int i = 0; i < this->wordinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->wordinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:records.arrayoffsets_to_wordinfo)
}

::google::protobuf::uint8* arrayoffsets_to_wordinfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:records.arrayoffsets_to_wordinfo)
  // repeated uint64 arrayoffsets = 1;
  for (int i = 0; i < this->arrayoffsets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(1, this->arrayoffsets(i), target);
  }

  // repeated .records.wordinfo wordinfos = 2;
  for (int i = 0; i < this->wordinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->wordinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:records.arrayoffsets_to_wordinfo)
  return target;
}

int arrayoffsets_to_wordinfo::ByteSize() const {
  int total_size = 0;

  // repeated uint64 arrayoffsets = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->arrayoffsets_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->arrayoffsets(i));
    }
    total_size += 1 * this->arrayoffsets_size() + data_size;
  }

  // repeated .records.wordinfo wordinfos = 2;
  total_size += 1 * this->wordinfos_size();
  for (int i = 0; i < this->wordinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wordinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void arrayoffsets_to_wordinfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const arrayoffsets_to_wordinfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const arrayoffsets_to_wordinfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void arrayoffsets_to_wordinfo::MergeFrom(const arrayoffsets_to_wordinfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrayoffsets_.MergeFrom(from.arrayoffsets_);
  wordinfos_.MergeFrom(from.wordinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void arrayoffsets_to_wordinfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void arrayoffsets_to_wordinfo::CopyFrom(const arrayoffsets_to_wordinfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool arrayoffsets_to_wordinfo::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->wordinfos())) return false;
  return true;
}

void arrayoffsets_to_wordinfo::Swap(arrayoffsets_to_wordinfo* other) {
  if (other != this) {
    arrayoffsets_.Swap(&other->arrayoffsets_);
    wordinfos_.Swap(&other->wordinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata arrayoffsets_to_wordinfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = arrayoffsets_to_wordinfo_descriptor_;
  metadata.reflection = arrayoffsets_to_wordinfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int payload::kArrayoffsetsToWordinfosFieldNumber;
#endif  // !_MSC_VER

payload::payload()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:records.payload)
}

void payload::InitAsDefaultInstance() {
}

payload::payload(const payload& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:records.payload)
}

void payload::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

payload::~payload() {
  // @@protoc_insertion_point(destructor:records.payload)
  SharedDtor();
}

void payload::SharedDtor() {
  if (this != default_instance_) {
  }
}

void payload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* payload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return payload_descriptor_;
}

const payload& payload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_records_2eproto();
  return *default_instance_;
}

payload* payload::default_instance_ = NULL;

payload* payload::New() const {
  return new payload;
}

void payload::Clear() {
  arrayoffsets_to_wordinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool payload::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:records.payload)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .records.arrayoffsets_to_wordinfo arrayoffsets_to_wordinfos = 1;
      case 1: {
        if (tag == 10) {
         parse_arrayoffsets_to_wordinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arrayoffsets_to_wordinfos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_arrayoffsets_to_wordinfos;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:records.payload)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:records.payload)
  return false;
#undef DO_
}

void payload::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:records.payload)
  // repeated .records.arrayoffsets_to_wordinfo arrayoffsets_to_wordinfos = 1;
  for (int i = 0; i < this->arrayoffsets_to_wordinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->arrayoffsets_to_wordinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:records.payload)
}

::google::protobuf::uint8* payload::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:records.payload)
  // repeated .records.arrayoffsets_to_wordinfo arrayoffsets_to_wordinfos = 1;
  for (int i = 0; i < this->arrayoffsets_to_wordinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->arrayoffsets_to_wordinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:records.payload)
  return target;
}

int payload::ByteSize() const {
  int total_size = 0;

  // repeated .records.arrayoffsets_to_wordinfo arrayoffsets_to_wordinfos = 1;
  total_size += 1 * this->arrayoffsets_to_wordinfos_size();
  for (int i = 0; i < this->arrayoffsets_to_wordinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arrayoffsets_to_wordinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void payload::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const payload* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const payload*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void payload::MergeFrom(const payload& from) {
  GOOGLE_CHECK_NE(&from, this);
  arrayoffsets_to_wordinfos_.MergeFrom(from.arrayoffsets_to_wordinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void payload::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void payload::CopyFrom(const payload& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool payload::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->arrayoffsets_to_wordinfos())) return false;
  return true;
}

void payload::Swap(payload* other) {
  if (other != this) {
    arrayoffsets_to_wordinfos_.Swap(&other->arrayoffsets_to_wordinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata payload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = payload_descriptor_;
  metadata.reflection = payload_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace records

// @@protoc_insertion_point(global_scope)
